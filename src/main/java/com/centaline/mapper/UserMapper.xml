<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.centaline.mapper.UserMapper">
    <select id="findUserById" parameterType="java.lang.Integer" resultType="com.centaline.pojo.User">
        select  * from user where id = #{id}
    </select>
    <select id="findUserByUserName" parameterType="java.lang.String" resultType="user">
        select * from USER where username like '%${value}%';
    </select>
    <insert id="insertUser" parameterType="com.centaline.pojo.User" >
        <!-- 执行 select LAST_INSERT_ID()数据库函数,返回自增的主键
                keyProperty:将返回的主键放入传入参数的Id中保存.
                order:当前函数相对于insert语句的执行顺序,在insert前执行是before,在insert后执行是AFTER
                resultType:id的类型,也就是keyproperties中属性的类型
                -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            select LAST_INSERT_ID()
        </selectKey>
        insert into user (username,birthday,sex,address) values (#{username},#{birthday},#{sex},#{address})
    </insert>
    <select id="findUserByVo" parameterType="com.centaline.pojo.QueryVO" resultType="com.centaline.pojo.User">
        select * from user where username like  '%${user.username}%' and sex = #{user.sex}
    </select>
    <!--只有返回结果为一行一列的时候，那么返回值类型才可以指定基本类型-->
    <select id="findUserCount" resultType="java.lang.Integer">
        select count(*) from user
    </select>
    <select id="findUserByUserNameAndSex" parameterType="com.centaline.pojo.User" resultType="com.centaline.pojo.User">
        select * from user
        <!--自动去掉第一个条件的where 关键字-->
        <include refid="user_where"></include>
    </select>
    <select id="findUserByIds" parameterType="com.centaline.pojo.QueryVO" resultType="com.centaline.pojo.User">
        select * from user
        <where>
            <if test="ids != null ">
            <!--
             foreach 循环集合，传入的集合参数 collection  传入的集合的 变量名称
             item 是 什么，每次循环，将循环出的数据放入这个变量中
             open 是什么 循环开始拼接的字符串
             close 循环结束拼接的字符串
             separator：循环中拼接的分隔符

            -->
                <foreach collection="ids" item="id" open="id in (" close=")"  separator=",">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>
    <!--封装sql条件，封装后可以重用
    id是这个sql条件的唯一标识
    -->
    <sql id="user_where">
        <where>
            <if test="username !=null and username !=''">
                and username like  '%${username}%'
            </if>
            <if test="sex !=null and sex != ''">
                and sex = #{sex}
            </if>
        </where>
    </sql>
    <!--一对一：自动映射-->
    <select id="findOrderAndUser1" resultType="com.centaline.pojo.CustomOrders">
        select a.*, b.id uid, username, birthday, sex, address
		from orders a, user b
		where a.user_id = b.id
    </select>
    <!--一对一：手动映射
    注意 手动映射 需要制定数据中 表的字段名，与  java中pojo类的属性名称 对应关系
    -->
    <resultMap id="orderAndUserResultMap" type="com.centaline.pojo.Orders">
        <id column="id" property="id"/>

        <!-- result:标签指定非主键字段的对应关系 -->
        <result column="user_id" property="userId"/>
        <result column="number" property="number"/>
        <result column="createtime" property="createtime"/>
        <result column="note" property="note"/>

        <!-- 这个标签指定单个对象的对应关系
        property:指定将数据放入Orders中的user属性中
        javaType:user属性的类型
        -->
        <association property="user" javaType="com.centaline.pojo.User">
            <id column="uid" property="id"/>
            <result column="username" property="username"/>
            <result column="birthday" property="birthday"/>
            <result column="sex" property="sex"/>
            <result column="address" property="address"/>
        </association>
    </resultMap>
    <select id="findOrderAndUser2" resultMap="orderAndUserResultMap">
        select a.*, b.id uid, username, birthday, sex, address
		from orders a, user b
		where a.user_id = b.id
    </select>

    <resultMap type="com.centaline.pojo.User" id="userAndOrdersResultMap">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="birthday" property="birthday"/>
        <result column="sex" property="sex"/>
        <result column="address" property="address"/>

        <!-- 指定对应的集合对象关系映射
        property:将数据放入User对象中的ordersList属性中
        ofType:指定ordersList属性的泛型类型
         -->
        <collection property="ordersList" ofType="com.centaline.pojo.Orders">
            <id column="oid" property="id"/>
            <result column="user_id" property="userId"/>
            <result column="number" property="number"/>
            <result column="createtime" property="createtime"/>
        </collection>
    </resultMap>
    <select id="findUserAndOrders" resultMap="userAndOrdersResultMap">
		select a.*, b.id oid ,user_id, number, createtime
		from user a, orders b where a.id = b.user_id
	</select>
</mapper>