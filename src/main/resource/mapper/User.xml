<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace:命名空间，做sql隔离-->
<mapper namespace="test">
    <!--
    id:sql语句唯一标识
    parameterType：指定传入参数类型
    resultType:返回结果类型
    #{}占位符：起到占位作用 ，如果传入的是基本类型（String,long,double,int,boolean,float等，那么#{}中的变量名称可以随意写）
    -->
    <select id="findUserById" parameterType="java.lang.Integer" resultType="com.centaline.pojo.User">
        select  * from user where id = #{id}
    </select>
    <!--注意：拼接符有注入的危险，所以慎重使用
     等号旁边用占位符
     like 要用拼接符
     -->
    <select id="findUserByUserName" parameterType="java.lang.String" resultType="com.centaline.pojo.User">
        select * from USER where username like '%${value}%';
    </select>
    <!--如果传入的是pojo类型，那么#{}中的变量名称必须是poho中对应的属性，属性.....-->
    <insert id="insertUser" parameterType="com.centaline.pojo.User" >
        <!-- 执行 select LAST_INSERT_ID()数据库函数,返回自增的主键
                keyProperty:将返回的主键放入传入参数的Id中保存.
                order:当前函数相对于insert语句的执行顺序,在insert前执行是before,在insert后执行是AFTER
                resultType:id的类型,也就是keyproperties中属性的类型
                -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            select LAST_INSERT_ID()
        </selectKey>
        insert into user (username,birthday,sex,address) values (#{username},#{birthday},#{sex},#{address})
    </insert>

</mapper>